[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clauxton"
version = "0.11.2"
description = "Context that persists for Claude Code - Knowledge Base, Task Management, and Conflict Detection"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Nakishiyama", email = "noreply@example.com" }
]
keywords = [
    "claude",
    "claude-code",
    "context",
    "knowledge-base",
    "task-management",
    "mcp",
    "ai-assistant",
    "plugin"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic>=2.0",
    "click>=8.1",
    "pyyaml>=6.0",
    "gitpython>=3.1",
    "mcp>=1.0",
    "scikit-learn>=1.3",
    "numpy>=1.24",
    "tree-sitter>=0.20",
    "rich>=13.0",  # For better CLI output
]

[project.optional-dependencies]
# AI Integration (v0.12.0+) - Optional but recommended
ai = [
    "anthropic>=0.8.0",           # Claude API for intelligent queries
    "sentence-transformers>=2.3.0",  # Local embeddings
    "faiss-cpu>=1.7.4",           # Vector store for semantic search
]

# AI Full (includes larger dependencies for advanced features)
ai-full = [
    "anthropic>=0.8.0",
    "sentence-transformers>=2.3.0",
    "faiss-cpu>=1.7.4",
    "torch>=2.1.0",               # For advanced embeddings
    "transformers>=4.36.0",       # Transformer models
]

# Language parsers (optional - install only what you need)
parsers-python = ["tree-sitter-python>=0.20"]
parsers-javascript = ["tree-sitter-javascript>=0.20"]
parsers-typescript = ["tree-sitter-typescript>=0.20"]
parsers-go = ["tree-sitter-go>=0.20"]
parsers-rust = ["tree-sitter-rust>=0.20"]
parsers-cpp = ["tree-sitter-cpp>=0.20"]
parsers-java = ["tree-sitter-java>=0.20"]
parsers-csharp = ["tree-sitter-c-sharp>=0.20"]
parsers-php = ["tree-sitter-php>=0.20"]
parsers-ruby = ["tree-sitter-ruby>=0.20"]
parsers-swift = ["py-tree-sitter-swift>=0.0.1"]
parsers-kotlin = ["tree-sitter-kotlin>=1.0"]

# Convenience groups
parsers-web = [
    "tree-sitter-javascript>=0.20",
    "tree-sitter-typescript>=0.20",
    "tree-sitter-php>=0.20",
]
parsers-systems = [
    "tree-sitter-go>=0.20",
    "tree-sitter-rust>=0.20",
    "tree-sitter-cpp>=0.20",
]
parsers-enterprise = [
    "tree-sitter-java>=0.20",
    "tree-sitter-c-sharp>=0.20",
    "tree-sitter-kotlin>=1.0",
]
parsers-all = [
    "tree-sitter-python>=0.20",
    "tree-sitter-javascript>=0.20",
    "tree-sitter-typescript>=0.20",
    "tree-sitter-go>=0.20",
    "tree-sitter-rust>=0.20",
    "tree-sitter-cpp>=0.20",
    "tree-sitter-java>=0.20",
    "tree-sitter-c-sharp>=0.20",
    "tree-sitter-php>=0.20",
    "tree-sitter-ruby>=0.20",
    "py-tree-sitter-swift>=0.0.1",
    "tree-sitter-kotlin>=1.0",
]

# Development dependencies
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-asyncio>=0.21",
    "mypy>=1.5",
    "ruff>=0.1",
    "types-pyyaml>=6.0",
    "bandit>=1.7",
]

[project.urls]
Homepage = "https://github.com/nakishiyaman/clauxton"
Documentation = "https://github.com/nakishiyaman/clauxton/wiki"
Repository = "https://github.com/nakishiyaman/clauxton"
Issues = "https://github.com/nakishiyaman/clauxton/issues"

[project.scripts]
clauxton = "clauxton.cli.main:cli"
clauxton-mcp = "clauxton.mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["clauxton"]

[tool.hatch.build.targets.wheel.force-include]
".claude-plugin" = ".claude-plugin"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = []

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Markers for test categorization
markers = [
    "slow: marks tests as slow (deselected by default)",
    "performance: marks performance/benchmark tests (deselected by default)",
]

# Default options: exclude slow/performance tests, enable coverage
addopts = "-m 'not slow and not performance' --strict-markers --cov=clauxton --cov-report=html --cov-report=term"
